#!/bin/sh

# to minimize browser build, must have java 8+ installed, download
# closure compiler, and set $CCJAR to the jar file's path.
#  https://github.com/google/closure-compiler

# to generate docs and run lint, must have node and npm installed

SRCDIR=../src
LIBDIR=../lib
OTMPDIR=tmp
OUTDIR=out
DOCSDIR="$OUTDIR/docs"


if [ ! -f "$CCJAR" ] && [ "$CCJAR" != "0" ]; then
	# if $CCJAR file does not exist, search current directory for CC
	CCJAR=$(find -name "*closure*compiler*.jar" 2> /dev/null | LC_ALL=C sort | tail -1)
fi

catAllSrc() {
	cat "$OTMPDIR/version.js" "$SRCDIR/Queue.js" "$SRCDIR/BigDec.js" "$SRCDIR/PartialParser.js" "$SRCDIR/Serializer.js" "$SRCDIR/OpaUtils.js" "$SRCDIR/EventClient.js"
}


VERSION="$(./verget)"

echo "building v$VERSION"

mkdir -p "$OUTDIR"
mkdir -p "$OTMPDIR"
rm -rf "${OUTDIR:?}/"*
rm -rf "${OTMPDIR:?}/"*

printf "var VERSION = \"%s\";\n\n" "$VERSION" >> "$OTMPDIR/version.js"

echo "var BigInteger = (function() {" > "$OTMPDIR/jsbn.js"
cat "$LIBDIR/jsbn/jsbn.js" "$LIBDIR/jsbn/jsbn2.js" >> "$OTMPDIR/jsbn.js"
printf "\nreturn BigInteger;\n}());\n" >> "$OTMPDIR/jsbn.js"

# TODO: figure out how to do source mapping for minimized files? (helps with debugging)

echo "assembling sources for full-size opac..."
{
	echo "\"use strict\";"
	echo "// BigInteger (http://www-cs-students.stanford.edu/~tjw/jsbn/):"
	cat "$LIBDIR/jsbn/LICENSE" "$OTMPDIR/jsbn.js"
	printf "\n\n"
	echo "// Bundled source code for opatomic client. see https://github.com/opatomic/opac-js for more info"
	echo "(function() {"
	cat "browser.head.js" "$SRCDIR/OpaDef.js" "bigintFromBytes-jsbn.js"
	catAllSrc
	cat "browser.foot.js"
	echo "})();"
} > "$OUTDIR/opac.browser.js"

mkdir "$OUTDIR/node"
echo "\"use strict\";" > "$OTMPDIR/usestrict.js"
{
	cat "node.head.js" "$SRCDIR/OpaDef.js" "bigintFromBytes-jsbn.js"
	catAllSrc
	cat "node.foot.js"
} > "$OTMPDIR/opac.node.noreqs.js"
cat "$OTMPDIR/usestrict.js" "node.reqs.js" "$OTMPDIR/opac.node.noreqs.js" > "$OUTDIR/node/opac.node.js"
sed -e "s/\\\$VERSION/$VERSION/" "package.json" > "$OUTDIR/node/package.json"
cp "../README.md" "$OUTDIR/node/README.md"
cp "../LICENSE" "$OUTDIR/node/"
cat "$OTMPDIR/usestrict.js" "$OTMPDIR/opac.node.noreqs.js" > "$OTMPDIR/tmp.js"
mv "$OTMPDIR/tmp.js" "$OTMPDIR/opac.node.noreqs.js"

mkdir -p tools
cd tools || exit 1
if [ ! -d "node_modules" ]; then
	npm init -y
	npm install jsdoc docdash --save-dev
	npm install eslint eslint-config-standard eslint-plugin-promise eslint-plugin-import eslint-plugin-n --save-dev
fi
cd - > /dev/null

echo "linting full size sources..."
./lint

if [ -f "$CCJAR" ]; then
	CC_ARGS="--extra_annotation_name callback --extra_annotation_name hideconstructor -W VERBOSE"

	# uncomment any of the following lines to help locate untyped code and other issues. However, they may spit out a lot of warnings so they are disabled by default.
	#CC_ARGS="$CC_ARGS --jscomp_warning=reportUnknownTypes"
	CC_ARGS="$CC_ARGS --jscomp_warning \"*\" --jscomp_off=lintChecks"
	#CC_ARGS="$CC_ARGS --jscomp_warning \"*\""
	# use the following command to filter out some linter warnings:
	#   ./build 2>&1 | grep JSC_ | grep -vE "JSC_VAR|JSC_MISSING_SEMICOLON"

	# TODO: store closure compiler version in source somewhere?
	echo "minimizing opac with closure compiler..."
	java -jar "$CCJAR" --js "browser.head.js" "$SRCDIR/OpaDef.js" "bigintFromBytes-jsbn.js" "$OTMPDIR/version.js" "$SRCDIR/Queue.js" "$SRCDIR/BigDec.js" "$SRCDIR/PartialParser.js" "$SRCDIR/Serializer.js" "$SRCDIR/OpaUtils.js" "$SRCDIR/EventClient.js" "browser.foot.js" --externs "biginteger.externs.js" --externs "jsbn.externs.protected.js" --js_output_file "$OTMPDIR/bundle.min.js" --rewrite_polyfills=false --assume_function_wrapper $CC_ARGS
	echo "validating node source with closure compiler..."
	java -jar "$CCJAR" --js "$OTMPDIR/opac.node.noreqs.js" --process_common_js_modules --externs "biginteger.externs.js" --externs "jsbn.externs.protected.js" --externs "node.externs.js" --checks_only --module_resolution NODE $CC_ARGS
	echo "minimizing jsbn with closure compiler..."
	java -jar "$CCJAR" --js "$OTMPDIR/jsbn.js" --js_output_file "$OTMPDIR/jsbn.min.js"

	{
		echo "// Minimized and bundled source code for opatomic client. see https://github.com/opatomic/opac-js for more info"
		echo "/* BigInteger (http://www-cs-students.stanford.edu/~tjw/jsbn/) LICENSE file: */"
		cat "$LIBDIR/jsbn/LICENSE"
		echo "(function() {"
		cat "$OTMPDIR/jsbn.min.js" "$OTMPDIR/bundle.min.js"
		echo "}());"
	} > "$OUTDIR/opac.browser.min.js"
else
	[ "$CCJAR" = "0" ] || echo "CCJAR not found. browser build will not minimize"
fi


rm -rf "${OTMPDIR:?}/"*


# TODO: run some tests!!!

echo "generating docs..."
mkdir -p "$DOCSDIR"
rm -rf "${DOCSDIR:?}/"*

cd tools || exit 1
node ./node_modules/jsdoc/jsdoc.js ../../src/ ../biginteger.externs.js -d "../$DOCSDIR" -c ../jsdoc.conf.json
cd - > /dev/null


