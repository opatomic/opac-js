#!/bin/bash

function handleErr {
	SNAME=$(basename $BASH_SOURCE)
	echo "$SNAME: Error on line $1"
	exit 1
}

trap 'handleErr $LINENO' ERR


function testDeps {
	for i in "$@"; do $i --version > /dev/null 2>&1 || { echo "error: $i must be installed"; exit 1; } ; done
}

# make sure dependencies are installed
testDeps git jq curl npm


GHURL=`git config --get remote.origin.url`
# see https://stackoverflow.com/a/8979741 for string pattern matching info
GHURL=${GHURL#*github.com/}
GHUSER=${GHURL%%/*}
GHREPO=${GHURL##*/}
if [[ -z "$GHTOKEN" ]]; then
	if [[ -z "$GHTOKENFILE" ]]; then
		GHTOKENFILE="$HOME/githubtoken"
	fi
	if [ ! -f "$GHTOKENFILE" ]; then
		echo "GHTOKEN or GHTOKENFILE must be set properly"
		exit 1
	fi
	GHTOKEN=`cat $GHTOKENFILE`
fi


MODCNT=`git status --porcelain | wc -l`
if [ $MODCNT -ne 0 ]; then
	echo "There are $MODCNT changes. Must revert or check in changes."
	exit 1
fi

VERSION=`cat version.txt`

VERSION="v$VERSION" ./build


# args: user, token, repo, releaseid, filename
function uploadAsset {
	echo "uploading $(basename $5)"
	local UPLOADURL="https://uploads.github.com/repos/$1/$3/releases/$4/assets?name=$(basename $5)"
	curl -s -S -u "$1:$2" -H "Content-Type: application/octet-stream" --data-binary @"$5" $UPLOADURL > /dev/null
}

GHTAG="v$VERSION"

# create release and get its id
echo "creating release $GHTAG"
GHRELID=`curl -s -S -u "$GHUSER:$GHTOKEN" -X POST "https://api.github.com/repos/$GHUSER/$GHREPO/releases" -d "{\"tag_name\":\"$GHTAG\"}" | jq ".id"`

# upload files
uploadAsset $GHUSER $GHTOKEN $GHREPO $GHRELID "out/opac.browser.js"
uploadAsset $GHUSER $GHTOKEN $GHREPO $GHRELID "out/opac.browser.min.js"


npm publish out/node

